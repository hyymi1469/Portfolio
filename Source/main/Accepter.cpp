#include "Accepter.h"
#include "Enum.h"
#include "SessionManager.h"
#include "SocketManager.h"


////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief	생성자
/// 
/// @return	없음
////////////////////////////////////////////////////////////////////////////////////////////////////
Accepter::Accepter()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief	소멸자
/// 
/// @return	없음
////////////////////////////////////////////////////////////////////////////////////////////////////
Accepter::~Accepter()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief	스레드 생성을 시작한다.
/// 
/// @return	없음
////////////////////////////////////////////////////////////////////////////////////////////////////
void Accepter::Begin()
{
	if ( m_isStarted )
		return;

	m_isStarted = true;

	std::thread myThread = std::thread( &Accepter::Run, this );
	myThread.detach();

	std::this_thread::sleep_for( std::chrono::milliseconds( 1 ) );
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief	스레드를 작동시킨다.
/// 
/// @return	없음
////////////////////////////////////////////////////////////////////////////////////////////////////
void Accepter::Run()
{
	std::stringstream ss;
	ss << std::this_thread::get_id();
	m_threadId = atoi( ss.str().c_str() );
	printf( "AcceptThread start : %d\n", m_threadId );

	DWORD connectIndex = 0;
	SOCKET socketAccept = INVALID_SOCKET;

	while ( true )
	{
		socketAccept = SocketManager::GetSingleton()->AcceptConnection( connectIndex );
		if ( socketAccept == INVALID_SOCKET )
			continue;

		switch ( (EAcceptType)( connectIndex ) )
		{
			case EAcceptType::User:
			{
				SessionManager::GetSingleton()->CreateNewSession( socketAccept );
			}
			break;
		}

	}
}
