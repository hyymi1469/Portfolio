#include <thread>
#include "IocpManager.h"
#include "LogicThread.h"
#include "SessionManager.h"
#include "User.h"


////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief	생성자
/// 
/// @return	없음
////////////////////////////////////////////////////////////////////////////////////////////////////
LogicThread::LogicThread()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief	소멸자
/// 
/// @return	없음
////////////////////////////////////////////////////////////////////////////////////////////////////
LogicThread::~LogicThread()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief	스레드 생성을 시작한다.
/// 
/// @return	없음
////////////////////////////////////////////////////////////////////////////////////////////////////
void LogicThread::Begin()
{
	if ( m_isStarted )
		return;

	m_isStarted = true;

	std::thread myThread = std::thread( &LogicThread::Run, this );
	myThread.detach();

	std::this_thread::sleep_for( std::chrono::milliseconds( 10 ) );
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief	스레드를 작동시킨다.
/// 
/// @return	없음
////////////////////////////////////////////////////////////////////////////////////////////////////
void LogicThread::Run()
{	
	std::stringstream ss;
	ss << std::this_thread::get_id();
	m_threadId = atoi( ss.str().c_str() );

	m_taskManager.Initialize( "LogicThread", m_threadId, false );
	printf( "LogicThread start : %d\n", m_threadId );

	while ( true )
	{
		struct timeb tb;
		ftime( &tb );
		const __int64 curTime = ( std::time( nullptr ) * 1000 ) + tb.millitm;

		m_taskManager.Update( curTime );
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief	방 쓰레드에서 작업을 실행한다.
///
/// @param	task	작업
///
/// @return	반환 값 없음
////////////////////////////////////////////////////////////////////////////////////////////////////
void LogicThread::RunTask( const TaskManager::Task& task )
{
	m_taskManager.RunTask( task );
}