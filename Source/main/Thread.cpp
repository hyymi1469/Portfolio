#include "Thread.h"
#include "ThreadManager.h"
#include <process.h>


////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief	생성자
/// 
/// @return	없음
////////////////////////////////////////////////////////////////////////////////////////////////////
Thread::Thread()
	:
	m_isStarted( false ),
	m_threadId( 0 ),
	m_threadHandle( INVALID_HANDLE_VALUE ),
	m_taskCount( 0 )
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief	소멸자
/// 
/// @return	없음
////////////////////////////////////////////////////////////////////////////////////////////////////
Thread::~Thread()
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief	스레드 생성을 준비한다.(_beginthreadex Ver)
/// 
/// @param	threadName       생성하고자 하는 스레드 이름
/// 
/// @return	없음
////////////////////////////////////////////////////////////////////////////////////////////////////
void Thread::BeginThread()
{
	if ( m_isStarted )
		return;

	m_isStarted = true;

	m_threadHandle = ThreadManager::GetSingleton()->BeginCreateThread( HandleRunner, this, m_threadId );
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief	스레드 생성한다.(_beginthreadex Ver)
/// 
/// @param	param  Run 돌릴 자식 클래스
/// 
/// @return	없음
////////////////////////////////////////////////////////////////////////////////////////////////////
DWORD Thread::HandleRunner( LPVOID param )
{
	Thread* th = (Thread*)( param );
	th->Run();

	_endthreadex( 0 );
	return 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief	종료시 처리사항
/// 
/// @return	없음
////////////////////////////////////////////////////////////////////////////////////////////////////
void Thread::End()
{
	if ( !m_isStarted )
		return;

	m_isStarted = false;
	//ThreadManager::GetSingleton()->KillThread( threadHandle );
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief	logic갯수를 반환한다.
/// 
/// @return	logic갯수
////////////////////////////////////////////////////////////////////////////////////////////////////
int Thread::GetTaskCount()
{
	return m_taskCount.load();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief	logic갯수를 증가시킨다.
/// 
/// @return	None
////////////////////////////////////////////////////////////////////////////////////////////////////
void Thread::IncreaseTaskCount()
{
	m_taskCount.fetch_add( 1 );
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief	logic갯수를 감소시킨다.
/// 
/// @return	None
////////////////////////////////////////////////////////////////////////////////////////////////////
void Thread::DecreaseTaskCount()
{
	m_taskCount.fetch_sub( 1 );
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// @brief	스레드 식별자를 반환한다.
/// 
/// @return	스레드 식별자
////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int Thread::GetThreadId()
{
	return m_threadId;
}
